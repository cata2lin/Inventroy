# crud/utils.pyfrom sqlalchemy.orm import Sessionfrom sqlalchemy.dialects.postgresql import insertfrom typing import List, Dict, Anydef upsert_batch(db: Session, model_class, data: List[dict], index_elements: List[str]):    """    Performs a batch 'upsert' (insert on conflict update) operation.    """    if not data: return    # Ensure all items have the necessary keys for the index to avoid errors    valid_data = [item for item in data if all(k in item and item[k] is not None for k in index_elements)]    if not valid_data: return        unique_data = {tuple(item[key] for key in index_elements): item for item in valid_data}.values()    table = model_class.__table__    stmt = insert(table).values(list(unique_data))    update_cols = {c.name: c for c in stmt.excluded if c.name not in index_elements and c.name not in ['id', 'created_at']}        if not update_cols:        on_conflict_stmt = stmt.on_conflict_do_nothing(index_elements=index_elements)    else:        on_conflict_stmt = stmt.on_conflict_do_update(index_elements=index_elements, set_=update_cols)            db.execute(on_conflict_stmt)